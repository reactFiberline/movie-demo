'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCommitChangesTime = undefined;

var _math = require('./math');

// Update the store with the time spent while committing the changes
var updateStore = function updateStore(store, measure, delimiter) {
  if (measure.name.includes(delimiter)) {
    var measureName = measure.name.split(delimiter).join('');

    if (measureName.includes('(Committing Changes)')) {
      if (!store['Committing Changes']) {
        store['Committing Changes'] = {
          timeSpent: []
        };
      }

      store['Committing Changes'].timeSpent.push(Number(measure.duration.toFixed(2)));
    }
  }
};

var getCommitChangesTime = function getCommitChangesTime(measures) {
  var store = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = measures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var measure = _step.value;

      updateStore(store, measure, '⚛');
      updateStore(store, measure, '⛔');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return store;
};

exports.getCommitChangesTime = getCommitChangesTime;