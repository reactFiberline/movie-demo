'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateDataFromMeasures = undefined;

var _math = require('./math');

// Sort the all components by total time
var sortComponents = function sortComponents(components) {
  return components.sort(function (a, b) {
    return b.totalTime - a.totalTime;
  });
};

// Align the components by their name and total time
var alignComponents = function alignComponents(totalTime) {
  return Object.keys(totalTime).reduce(function (acc, name) {
    acc.push({ name: name, totalTime: totalTime[name] });
    return acc;
  }, []);
};

// Get the total time taken combining all the phases
var getTotalTime = function getTotalTime(components) {
  return components.reduce(function (acc, component) {
    return acc += component.totalTime;
  }, 0);
};

// Plot the timings (average time in ms, component instances, total time in ms)
var plotTimings = function plotTimings(nums) {
  return {
    averageTimeSpentMs: (0, _math.average)(nums),
    numberOfTimes: nums.length,
    totalTimeSpentMs: (0, _math.add)(nums)
  };
};

// Create a schema for each component
var createSchema = function createSchema(store, component, totalTime) {
  return {
    componentName: component.name,
    totalTimeSpent: component.totalTime,
    numberOfInstances: store[component.name].mount.timeSpent.length - store[component.name].unmount.timeSpent.length,
    percentTimeSpent: (0, _math.percent)(component.totalTime / totalTime),
    render: plotTimings(store[component.name].render.timeSpent),
    mount: plotTimings(store[component.name].mount.timeSpent),
    update: plotTimings(store[component.name].update.timeSpent),
    unmount: plotTimings(store[component.name].unmount.timeSpent),
    componentWillMount: plotTimings(store[component.name].componentWillMount.timeSpent),
    componentDidMount: plotTimings(store[component.name].componentDidMount.timeSpent),
    componentWillReceiveProps: plotTimings(store[component.name].componentWillReceiveProps.timeSpent),
    shouldComponentUpdate: plotTimings(store[component.name].shouldComponentUpdate.timeSpent),
    componentWillUpdate: plotTimings(store[component.name].componentWillUpdate.timeSpent),
    componentDidUpdate: plotTimings(store[component.name].componentDidUpdate.timeSpent),
    componentWillUnmount: plotTimings(store[component.name].componentWillUnmount.timeSpent)
  };
};

// Generate the data from React performance measures
var generateDataFromMeasures = function generateDataFromMeasures(store) {
  var componentsByTotalTime = {};

  for (var componentName in store) {
    // Default
    componentsByTotalTime[componentName] = componentsByTotalTime[componentName] || 0;

    // mount time
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].mount.timeSpent);
    // unmount time
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].unmount.timeSpent);
    // update time
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].update.timeSpent);
    // render time
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].render.timeSpent);
    // time spent in componentWillMount
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentWillMount.timeSpent);
    // time spent in componentDidMount
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentDidMount.timeSpent);
    // time spent in componentWillReceiveProps
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentWillReceiveProps.timeSpent);
    // time spent in shouldComponentUpdate
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].shouldComponentUpdate.timeSpent);
    // time spent in componentWillUpdate
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentWillUpdate.timeSpent);
    // time spent in componentDidUpdate
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentDidUpdate.timeSpent);
    // time spent in componentWillUnmount
    componentsByTotalTime[componentName] += (0, _math.add)(store[componentName].componentWillUnmount.timeSpent);
  }

  var components = alignComponents(componentsByTotalTime);

  var totalTime = getTotalTime(components);

  return sortComponents(components).map(function (component) {
    return createSchema(store, component, totalTime);
  });
};

exports.generateDataFromMeasures = generateDataFromMeasures;