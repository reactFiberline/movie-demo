'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLifecycleTime = exports.getTotalMethods = undefined;

var _math = require('./math');

// Update the time spent while calling all the lifcycle methods
var updateStore = function updateStore(store, measure) {
  if (measure.name.includes('⚛')) {
    var measureName = measure.name.split('⚛ ').join('');

    if (measureName.includes('Calling Lifecycle Methods')) {
      var totalMethods = Number(measureName.split(':')[1].split(' ')[1]);
      if (!store['Calling Lifecycle Methods']) {
        store['Calling Lifecycle Methods'] = {
          timeSpent: [],
          totalMethods: []
        };
      }

      store['Calling Lifecycle Methods'].timeSpent.push(Number(measure.duration.toFixed(2)));
      store['Calling Lifecycle Methods'].totalMethods.push(totalMethods);
    }
  }

  return {};
};

var getLifecycleTime = function getLifecycleTime(measures) {
  var store = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = measures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var measure = _step.value;

      updateStore(store, measure);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return store;
};

// Get the total number of lifecycle methods that were called
var getTotalMethods = function getTotalMethods(store) {
  var totalMethods = 0;

  for (var measure in store) {
    totalMethods = totalMethods || 0;
    totalMethods += (0, _math.add)(store[measure].totalMethods);
  }

  return Number(totalMethods.toFixed(2));
};

exports.getTotalMethods = getTotalMethods;
exports.getLifecycleTime = getLifecycleTime;